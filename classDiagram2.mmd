classDiagram
%% Core CRTP Base Class
class BaseFrame~Derived~ {
    <<template>>
    #Derived& derived()
    +Result~Type~ get_type()
    +Result~void~ serialize(vector~byte~& buffer)*
    +Result~void~ deserialize(vector~byte~ buffer)*
    +Result~CanId~ get_id()
    +Result~void~ set_id(CanId id)
    +Result~vector~byte~~ get_data()
    +Result~void~ set_data(vector~byte~ data)
}

%% Concrete Frame Types
class FixedFrame {
    -array~byte, 20~ storage
    -bool id_size_cached
    +impl_get_type() Result~Type~
    +impl_serialize(vector~byte~& buffer) Result~void~
    +impl_deserialize(vector~byte~ buffer) Result~void~
    +impl_get_id() Result~CanId~
    +impl_set_id(CanId id) Result~void~
    +calculate_checksum() byte
    +set_frame_type(Type type) Result~void~
}

class VariableFrame {
    -vector~byte~ storage
    +impl_get_type() Result~Type~
    +impl_serialize(vector~byte~& buffer) Result~void~
    +impl_deserialize(vector~byte~ buffer) Result~void~
    +impl_get_id() Result~CanId~
    +impl_set_id(CanId id) Result~void~
    +get_dlc() Result~byte~
    +set_dlc(byte dlc) Result~void~
}

%% Frame Traits System
class FrameTraits~T~ {
    <<template>>
    +using storage_type = void
    +using size_type = void
    +static constexpr size_t HEADER_SIZE = 0
}

class FrameTraitsFixedFrame {
    <<specialization>>
    +using storage_type = array~byte, 20~
    +using size_type = integral_constant~size_t, 20~
    +static constexpr size_t HEADER_SIZE = 3
    +static constexpr size_t CHECKSUM_SIZE = 1
}

class FrameTraitsVariableFrame {
    <<specialization>>
    +using storage_type = vector~byte~
    +using size_type = size_t
    +static constexpr size_t MIN_SIZE = 5
    +static constexpr size_t MAX_SIZE = 15
}

%% Result Type
class Result~T~ {
    -optional~T~ value
    -error_code error
    +Result(T val)
    +Result(error_code err)
    +bool fail()
    +bool operator!()
    +T& operator*()
    +T* operator->()
    +error_code get_error()
}

%% Protocol Enums
class Type {
    <<enumeration>>
    STANDARD_DATA_FRAME
    EXTENDED_DATA_FRAME
    STANDARD_REMOTE_FRAME
    EXTENDED_REMOTE_FRAME
    CONFIG_FRAME
}

class Constants {
    <<enumeration>>
    START_BYTE
    END_BYTE
    HEADER_SIZE
    CHECKSUM_OFFSET
}

%% Type Aliases
class frame_traits_t~T~ {
    <<alias>>
    +using type = FrameTraits~T~
}

%% Inheritance Relationships (CRTP)
BaseFrame~Derived~ <|-- FixedFrame : CRTP inheritance
BaseFrame~Derived~ <|-- VariableFrame : CRTP inheritance

%% Traits Relationships
FrameTraits~T~ <|.. FrameTraitsFixedFrame : specialization
FrameTraits~T~ <|.. FrameTraitsVariableFrame : specialization
frame_traits_t~T~ ..> FrameTraits~T~ : alias

%% Usage Dependencies
FixedFrame ..> FrameTraitsFixedFrame : uses traits
VariableFrame ..> FrameTraitsVariableFrame : uses traits
BaseFrame~Derived~ ..> Result~T~ : returns
FixedFrame ..> Type : uses
VariableFrame ..> Type : uses
FixedFrame ..> Constants : uses
VariableFrame ..> Constants : uses

%% Notes
note for BaseFrame~Derived~ "CRTP base class\nDelegates to derived().impl_*()"
note for FixedFrame "20-byte fixed storage\nAuto-calculates checksums\nCaches ID size"
note for VariableFrame "Dynamic 5-15 byte storage\nType byte encodes metadata"
note for FrameTraits~T~ "Primary template uses void types\nPrevents accidental usage"

