---
title: CAN Frame Class Diagram
config:
  layout: elk

---
classDiagram
        
    class FrameTraits~T~:::interfaces {
        <<template>>
        +static constexpr size_t FRAME_SIZE = 0
        +using StorageType = void
        +struct Layout = void
    }

    class FrameTraitsFixedFrame:::interfaces {
        <<specialization>>
        +static constexpr size_t FRAME_SIZE = 20
        +using StorageType = array~byte, FRAME_SIZE~
        +Layout
    }

    class FrameTraitsVariableFrame:::interfaces {
        <<specialization>>
        +static constexpr size_t MAX_FRAME_SIZE = 15
        +static constexpr size_t MIN_FRAME_SIZE = 5
        +using StorageType = vector~byte~
        +Layout
    }

    class FrameTraitsConfigFrame:::interfaces {
        <<specialization>>
        +static constexpr size_t FRAME_SIZE = 20
        +using StorageType = array~byte, FRAME_SIZE~
        +Layout
    }
    
    class FixedFrameLayout:::structs {
        +static constexpr size_t START = 0
        +static constexpr size_t HEADER = 1
        +static constexpr size_t TYPE = 2
        +static constexpr size_t CANVER = 3
        +static constexpr size_t FORMAT = 4
        +static constexpr size_t ID = 5
        +static constexpr size_t ID_SIZE = 4
        +static constexpr size_t DLC = 9
        +static constexpr size_t DATA = 10
        +static constexpr size_t DATA_SIZE = 8
        +static constexpr size_t CHECKSUM = 19
    }
    
    class VariableFrameLayout:::structs {
        +static constexpr size_t START = 0
        +static constexpr size_t TYPE = 1
        +static constexpr size_t ID = 2
        +static size_t data(bool extended_id)
        +static size_t end(bool extended_id, size_t data_len)
        +static size_t frame_size(bool extended_id, size_t data_len)
    }

    class ConfigFrameLayout:::structs {
        +static constexpr size_t START = 0
        +static constexpr size_t HEADER = 1
        +static constexpr size_t TYPE = 2
        +static constexpr size_t BAUD = 3
        +static constexpr size_t CANVER = 4
        +static constexpr size_t FILTER = 5
        +static constexpr size_t FILTER_SIZE = 4
        +static constexpr size_t MASK = 9
        +static constexpr size_t MASK_SIZE = 4
        +static constexpr size_t MODE = 13
        +static constexpr size_t AUTO_RTX = 14
        +static constexpr size_t RESERVED = 15
        +static constexpr size_t RESERVED_SIZE = 4
        +static constexpr size_t CHECKSUM = 19
    }

    class BaseFrame~T~ {
        <<CRTP Base Class>>        
        %% include type aliases
        #using Traits = frame_traits_t~T~
        #using StorageType = storage_type_t~T~
        #using Layout = layout_t~T~
        === Universal Methods() ===
        - init_fixed_fields() Result~void~
        + serialize(span~std::byte~ out) const Result~void~
        + deserialize(span~const std::byte~ in) Result~void~
        + validate() const Result~bool~
        + size() const Result~size_t~
        + get_raw_data() const Result~StorageType~
        + set_frame_type(FrameType type) Result~void~
        + get_frame_type() const Result~FrameType~
        === Config Frame Methods() ===
        + set_baud_rate(CANBaud baud) Result~void~
        + get_baud_rate() const Result~CANBaud~
        + set_mode(CANMode mode) Result~void~
        + get_mode() const Result~CANMode~
        + set_filter(uint32_t filter) Result~void~
        + get_filter() const Result~uint32_t~
        + set_mask(uint32_t mask) Result~void~
        + get_mask() const Result~uint32_t~
        + set_auto_rtx(RTX auto_rtx) Result~void~
        + get_auto_rtx() const Result~RTX~
        === Data Frame Methods() ===
        + set_id(uint32_t id) Result~void~
        + get_id() const Result~uint32_t~
        + get_data() const Result~span~const std::byte~~
        + set_data(span~const std::byte~ data) Result~void~
        + get_dlc() const Result~uint8_t~
        - set_dlc(uint8_t dlc) Result~void~
        + is_remote() const Result~bool~
        + set_format(FrameFormat format) Result~void~
        + get_format() const Result~FrameFormat~        
    
    }

    class FixedFrame:::classes {
        + using Traits = traits_t~FixedFrame~
        + using Layout = layout_t~FixedFrame~
        + using StorageType = storage_type_t~FixedFrame~
        %% Methods
        + impl_init_fixed_fields() Result~void~
        + impl_serialize(span~std::byte~ out) const Result~void~
        + impl_deserialize(span~const std::byte~ in) Result~void~
        + impl_validate() const Result~bool~
        + impl_size() const Result~size_t~
        + impl_get_raw_data() const Result~StorageType~
        + impl_set_frame_type(FrameType type) Result~void~
        + impl_get_frame_type() const Result~FrameType~
        + impl_set_id(uint32_t id) Result~void~
        + impl_get_id() const Result~uint32_t~
        + impl_get_data() const Result~span~const std::byte~~
        + impl_set_data(span~const std::byte~ data) Result~void~
        + impl_get_dlc() const Result~uint8_t~
        + impl_set_dlc(uint8_t dlc) Result~void~
        + impl_is_remote() const Result~bool~
        + impl_set_format(FrameFormat format) Result~void~
        + impl_get_format() const Result~FrameFormat~
    }
    
    class VariableFrame:::classes {
        + using Traits = traits_t~VariableFrame~
        + using Layout = layout_t~VariableFrame~
        + using StorageType = storage_type_t~VariableFrame~
        + impl_init_fixed_fields() Result~void~
        + impl_serialize(span~std::byte~ out) const Result~void~
        + impl_deserialize(span~const std::byte~ in) Result~void~
        + impl_validate() const Result~bool~
        + impl_size() const Result~size_t~
        + impl_get_raw_data() const Result~StorageType~
        + impl_set_frame_type(FrameType type) Result~void~
        + impl_get_frame_type() const Result~FrameType~
        + impl_set_id(uint32_t id) Result~void~
        + impl_get_id() const Result~uint32_t~
        + impl_get_data() const Result~span~const std::byte~~
        + impl_set_data(span~const std::byte~ data) Result~void~
        + impl_get_dlc() const Result~uint8_t~
        + impl_set_dlc(uint8_t dlc) Result~void~
        + impl_is_remote() const Result~bool~
        + impl_set_format(FrameFormat format) Result~void~
        + impl_get_format() const Result~FrameFormat~        
    }
    
    class ConfigFrame:::classes {
        + using Traits = traits_t~ConfigFrame~
        + using Layout = layout_t~ConfigFrame~
        + using StorageType = storage_type_t~ConfigFrame~

        impl_set_baud_rate(CANBaud baud) Result~void~
        impl_get_baud_rate() const Result~CANBaud~
        impl_set_mode(CANMode mode) Result~void~
        impl_get_mode() const Result~CANMode~
        impl_set_filter(uint32_t filter) Result~void~
        impl_get_filter() const Result~uint32_t~
        impl_set_mask(uint32_t mask) Result~void~
        impl_get_mask() const Result~uint32_t~
        impl_set_auto_rtx(RTX auto_rtx) Result~void~
        impl_get_auto_rtx() const Result~RTX~

    }
    
    class Result~T~ {
        <<template>>
        - value_or_error_ std::variant~T, Status~
        - operation_context_ std::string
        + Result() : value_or_error_(Status::UNKNOWN)
        + ok() const bool
        + fail() const Status
        + operator bool() const bool
        + operator!() const bool
        + value() const T&
        + value() T&
        + error() const Status
        + describe() const std::string
        + to_string() const std::string
        + static success(T val, const std::string& op="") Result~T~
        + static error(Status err, const std::string& op="") Result~T~
        + and_then~F~(F&& func) Result~std::invoke_result_t~F T~ ~
    }

    class Status:::enums {
        <<enumeration>>
        SUCCESS = 0
        WBAD_START = 1
        WBAD_HEADER = 2
        WBAD_TYPE = 3
        WBAD_FRAME_TYPE = 4
        WBAD_LENGTH = 5
        WBAD_ID = 6
        WBAD_DATA = 7
        WBAD_DLC = 8
        WBAD_FORMAT = 9
        WBAD_RESERVED = 10
        WBAD_CHECKSUM = 11
        WBAD_DATA_INDEX = 12
        WBAD_CAN_MODE = 13
        WBAD_CAN_BAUD = 14
        WBAD_FILTER = 15
        WBAD_MASK = 16
        WTIMEOUT = 17
        DNOT_FOUND = 18
        DNOT_OPEN = 19
        DALREADY_OPEN = 20
        DREAD_ERROR = 21
        DWRITE_ERROR = 22
        DCONFIG_ERROR = 23
        CAN_SDO_TIMEOUT = 24
        CAN_SDO_ABORT = 25
        CAN_PDO_ERROR = 26
        CAN_NMT_ERROR = 27
        UNKNOWN = 255

    }

    class Constants:::enums {
        <<enumeration>>
        START_BYTE = 0xAA
        MSG_HEADER = 0x55
        TYPE_DATA = 0x00
        RESERVED0 = 0x00
    }

    class Type:::enums {
        <<enumeration>>
        DATA_FIXED = 0x00
        DATA_VAR = 0xC0
        CONF_FIXED = 0x02
        CONF_VAR = 0xC2
    }
    class FrameType:::enums {
        <<enumeration>>
        STD_FIXED = 0x01
        STD_VAR = 0
        EXT_FIXED = 0x02
        EXT_VAR = 1
    }
    class Format:::enums {
        <<enumeration>>
        DATA_FIXED = 0x01
        REMOTE_FIXED = 0x02
        DATA_VAR = 0
        REMOTE_VAR = 1
    }
    class CANBaud :::enums {
        SPEED_1000K = 0x01
        SPEED_800K = 0x02
        SPEED_500K = 0x03
        SPEED_400K = 0x04
        SPEED_250K = 0x05
        SPEED_200K = 0x06
        SPEED_125K = 0x07
        SPEED_100K = 0x08
        SPEED_50K = 0x09
        SPEED_20K = 0x0A
        SPEED_10K = 0x0B
        SPEED_5K = 0x0C
    }
    class SerialBaud:::enums {
        BAUD_9600 = 9600
        BAUD_19200 = 19200
        BAUD_38400 = 38400
        BAUD_57600 = 57600
        BAUD_115200 = 115200
        BAUD_1228800 = 1228800
        BAUD_2000000 = 2000000
    }
    class CANMode:::enums {
        NORMAL = 0x00
        LISTEN_ONLY = 0x01
        LOOPBACK = 0x02
        LOOPBACK_LISTEN = 0x03
    }
    class RTX:::enums {
        AUTO = 0x00
        OFF = 0x01
    }

    
    %% Relationships
    FrameTraits~T~ --|> FrameTraitsFixedFrame 
    FrameTraits~T~ --|> FrameTraitsVariableFrame
    FrameTraits~T~ --|> FrameTraitsConfigFrame

    FrameTraitsFixedFrame *-- FixedFrameLayout 
    FrameTraitsVariableFrame *-- VariableFrameLayout 
    FrameTraitsConfigFrame *-- ConfigFrameLayout 
    
    FrameTraitsFixedFrame ..|> FixedFrame 
    FrameTraitsVariableFrame ..|> VariableFrame 
    FrameTraitsConfigFrame ..|> ConfigFrame 
    
    BaseFrame~T~ <|.. FrameTraits
    BaseFrame~T~ <|-- FixedFrame
    BaseFrame~T~ <|-- VariableFrame
    BaseFrame~T~ <|-- ConfigFrame
    
    BaseFrame~T~ ..|> Result~T~
    Result~T~ ..|> Status
    FixedFrame ..|> FixedFrameLayout
    VariableFrame ..|> VariableFrameLayout
    ConfigFrame ..|> ConfigFrameLayout
    FixedFrame ..|> Constants
    VariableFrame ..|> Constants
    ConfigFrame ..|> Constants
    FixedFrame ..|> Type
    VariableFrame ..|> Type
    ConfigFrame ..|> Type
    FixedFrame ..|> FrameType
    VariableFrame ..|> FrameType
    ConfigFrame ..|> FrameType
    FixedFrame ..|> Format
    VariableFrame ..|> Format
    ConfigFrame ..|> Format
    ConfigFrame ..|> CANBaud
    ConfigFrame ..|> CANMode
    ConfigFrame ..|> RTX


   %% Style classes
    classDef classes fill:#fff8e1,stroke:#f57c00,stroke-width:3px,color:#000
    classDef interfaces fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000;
    classDef enums fill:#bfb,stroke:#333,stroke-width:4px,color:#000;
    classDef structs fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000
    %% Manually apply styles to generic classes
    style BaseFrame fill:#fff8e1,stroke:#f57c00,stroke-width:3px,color:#000
    style FrameTraits fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000
    style Result fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000
    %% Notes
    note for FrameTraits "Provides utility types and aliases
    for SFINAE type checking."
    note for BaseFrame "Each methods calls impl_*() in derived class T.
    Methods are disabled through SFINAE if T's traits are invalid."
    note for Result "Provides std::error_category interface."


    class Core~Derived~ {
        <<CRTP Base Class>>
        # using traits = frame_traits_t~Derived~
        # using layout = layout_t~Derived~
        # using storage = storage_t~Derived~
        # storage frame_storage_
        # derived() Derived&
        # derived() const Derived&
        + Core() = default
        + ~Core() = default
        + serialize() const span~const byte~
        + to_string() const string
    }
    style Core fill:#fff8e1,stroke:#f57c00,stroke-width:3px,color:#000