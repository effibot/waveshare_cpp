classDiagram
    %% Updated Frame Traits with Hybrid Design
    %% - Primary template with interface documentation (void types)
    %% - VariableFrame uses MAX_* constants (no redundant aliases)
    %% - Added modern C++17 utility templates for convenience
    %% - SFINAE-friendly type checking and validation
    
    %% Color definitions for different entity types
    class FrameTraits {
        <<template trait>>
        +static constexpr size_t FRAME_SIZE = 0
        +static constexpr size_t ID_SIZE = 0
        +static constexpr size_t DATA_SIZE = 0
        +using StorageType = void
        +using IDType = void
        +using DataType = void
        +using PayloadPair = void
        +using IDPair = void
        +Note: Primary template with interface documentation
        +Note: Intentionally uses void types to prevent usage
        +Note: All specializations must override these members
    }
    
    class FrameTraitsFixedFrame {
        <<specialization>>
        +static constexpr size_t FRAME_SIZE = 20
        +static constexpr size_t ID_SIZE = 4
        +static constexpr size_t DATA_SIZE = 8
        +using StorageType = std::array~uint8_t, 20~
        +using IDType = std::array~uint8_t, 4~
        +using DataType = std::array~uint8_t, 8~
        +using PayloadPair = std::pair~DataType, uint8_t~
        +using IDPair = std::pair~IDType, uint8_t~
    }
    
    class FrameTraitsVariableFrame {
        <<specialization>>
        +static constexpr size_t MAX_FRAME_SIZE = 15
        +static constexpr size_t MAX_ID_SIZE = 4
        +static constexpr size_t MAX_DATA_SIZE = 8
        +using StorageType = std::vector~uint8_t~
        +using IDType = std::variant~uint16_t, uint32_t~
        +using DataType = std::vector~uint8_t~
        +using PayloadPair = std::pair~DataType, uint8_t~
        +using IDPair = std::pair~IDType, uint8_t~
        +Note: Uses MAX_* constants for variable sizing
        +Note: No redundant FRAME_SIZE aliases
    }
    
    class FrameTraitsConfigFrame {
        <<specialization>>
        +static constexpr size_t FRAME_SIZE = 20
        +static constexpr size_t CONFIG_SIZE = 16
        +using StorageType = std::array~uint8_t, 20~
        +using ConfigType = std::array~uint8_t, 16~
        +using BaudType = uint8_t
        +using ModeType = uint8_t
    }

    class BaseFrame {
        <<CRTP Base Class>>
        #using Traits = FrameTraits~Derived~
        #using StorageType = typename Traits::StorageType
        #StorageType storage
        +serialize() const → Result~std::array<uint8_t, Traits::FRAME_SIZE>~
        +deserialize(const uint8_t*) → Result~bool~
        +validate() const → Result~bool~
        +size() const → size_t
        +data() const → const uint8_t*
        +get_checksum() const → uint8_t
    }
    
    class FixedFrame {
        +using Traits = FrameTraits~FixedFrame~
        +using IDType = typename Traits::IDType
        +using DataType = typename Traits::DataType
        +set_id(const IDType&)
        +get_id() const → IDType
        +set_data(const DataType&, uint8_t dlc)
        +get_data() const → std::pair~DataType, uint8_t~
        +set_frame_type(uint8_t)
        +get_frame_type() const → uint8_t
        +calculate_checksum() const → uint8_t
    }
    
    class VariableFrame {
        +using Traits = FrameTraits~VariableFrame~
        +using IDType = typename Traits::IDType
        +using DataType = typename Traits::DataType
        +set_id(uint32_t, bool extended = false)
        +get_id() const → std::pair~uint32_t, bool~
        +set_data(const std::array~uint8_t~&)
        +get_data() const → std::array~uint8_t~
        +get_dlc() const → uint8_t
        +is_extended() const → bool
        +is_remote() const → bool
        +build_type_byte() const → uint8_t
    }
    
    class ConfigFrame {
        +using Traits = FrameTraits~ConfigFrame~
        +using ConfigType = typename Traits::ConfigType
        +set_can_baud(uint8_t)
        +get_can_baud() const → uint8_t
        +set_filter_mask(uint32_t filter, uint32_t mask)
        +get_filter_mask() const → std::pair~uint32_t, uint32_t~
        +set_can_mode(uint8_t)
        +get_can_mode() const → uint8_t
        +set_auto_rtx(bool)
        +get_auto_rtx() const → bool
        +validate_config() const → bool
    }
    
    class UsbCan {
        -libusb_context* context
        -libusb_device_handle* device_handle
        +initialize() → Result~bool~
        +close() → Result~bool~
        +send_frame~T~(const T&) → Result~bool~
        +receive_frame~T~() → Result~T~
        +configure(const ConfigFrame&) → Result~bool~
        +set_baud_rate(uint8_t) → Result~bool~
        +get_status() → Result~uint8_t~
        -write_data(const uint8_t*, size_t) → Result~size_t~
        -read_data(uint8_t*, size_t) → Result~size_t~
    }
    
    class Result {
        <<template>>
        +T value
        +std::error_code status
        +bool ok() const
        +bool fail() const
        +explicit operator bool() const
        +bool operator!() const
        +std::string to_string()
        +static Result~T~ success(T val)
        +static Result~T~ error(Status err)
    }
    
    class Status {
        <<enumeration>>
        SUCCESS = 0
        WBAD_START = 1
        WBAD_HEADER = 2
        WBAD_TYPE = 3
        WBAD_FRAME_TYPE = 4
        WBAD_LENGTH = 5
        WBAD_ID = 6
        WBAD_DATA = 7
        WBAD_DLC = 8
        WBAD_FORMAT = 9
        WBAD_RESERVED = 10
        WBAD_CHECKSUM = 11
        WBAD_DATA_INDEX = 12
        WBAD_CAN_MODE = 13
        WTIMEOUT = 14
        DNOT_FOUND = 15
        DNOT_OPEN = 16
        DALREADY_OPEN = 17
        DREAD_ERROR = 18
        DWRITE_ERROR = 19
        DCONFIG_ERROR = 20
        CAN_SDO_TIMEOUT = 21
        CAN_SDO_ABORT = 22
        CAN_PDO_ERROR = 23
        CAN_NMT_ERROR = 24
        UNKNOWN = 255
    }
    
    class ErrorCategory {
        <<std::error_category>>
        +name() const → const char*
        +message(int ev) const → std::string
    }
    
    class Common {
        <<utility>>
        +static constexpr uint8_t START = 0xAA
        +static constexpr uint8_t HEADER = 0x55
        +static constexpr uint8_t END = 0x55
        +enum class FrameType
        +enum class FrameFormat
        +enum class CANBaud
        +enum class CANMode
        +constexpr uint8_t calculate_checksum(const uint8_t*, size_t)
        +constexpr bool validate_dlc(uint8_t)
        +constexpr uint32_t extract_id(const uint8_t*, bool extended)
    }

    class FrameTraitsUtilities {
        <<utility templates>>
        +template~T~ using frame_traits_t = FrameTraits~T~
        +template~T~ constexpr size_t frame_size_v
        +template~T~ constexpr bool is_frame_type_v
        +template~T~ constexpr bool is_valid_frame_traits_v
        +template~T~ struct validate_frame_traits
        +Note: Modern C++17 utility templates
        +Note: SFINAE-friendly type checking
        +Note: Compile-time validation
    }

    %% Color styling - unique color for each class
    style FrameTraits fill:#e1f5fe,stroke:#01579b,stroke-width:2px,color:#000
    style FrameTraitsFixedFrame fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000
    style FrameTraitsVariableFrame fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000
    style FrameTraitsConfigFrame fill:#f3e5f5,stroke:#4a148c,stroke-width:2px,color:#000
    style BaseFrame fill:#fff8e1,stroke:#f57c00,stroke-width:3px,color:#000
    style FixedFrame fill:#fdf2c4,stroke:#ff6f00,stroke-width:2px,color:#000
    style VariableFrame fill:#fdf2c4,stroke:#ff6f00,stroke-width:2px,color:#000
    style ConfigFrame fill:#fdf2c4,stroke:#ff6f00,stroke-width:2px,color:#000
    style UsbCan fill:#ffebee,stroke:#c62828,stroke-width:3px,color:#000
    style Common fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px,color:#000
    style FrameTraitsUtilities fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px,color:#000
    style Result fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px,color:#000
    style Status fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px,color:#000
    style ErrorCategory fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px,color:#000


    %% Trait specialization relationships
    FrameTraits <|-- FrameTraitsFixedFrame : specializes
    FrameTraits <|-- FrameTraitsVariableFrame : specializes
    FrameTraits <|-- FrameTraitsConfigFrame : specializes
    
    %% CRTP inheritance relationships
    BaseFrame <|-- FixedFrame : inherits CRTP
    BaseFrame <|-- VariableFrame : inherits CRTP
    FixedFrame <|-- ConfigFrame : inherits
    
    %% Trait usage connections (connecting traits to BaseFrame through CRTP)
    BaseFrame ..> FrameTraits : uses via CRTP
    FixedFrame ..> FrameTraitsFixedFrame : instantiates traits
    VariableFrame ..> FrameTraitsVariableFrame : instantiates traits
    ConfigFrame ..> FrameTraitsConfigFrame : instantiates traits
    
    %% Main class dependencies
    UsbCan --> BaseFrame : uses
    UsbCan --> FixedFrame : uses
    UsbCan --> VariableFrame : uses
    UsbCan --> ConfigFrame : uses
    UsbCan --> Result : returns
    
    %% Error handling system
    Result --> Status : uses error codes
    Status --> ErrorCategory : converts to error_code
    
    %% Common utilities dependencies
    BaseFrame ..> Common : uses utilities
    BaseFrame --> Result : returns
    FixedFrame ..> Common : uses constants
    VariableFrame ..> Common : uses constants
    ConfigFrame ..> Common : uses constants
    UsbCan ..> Common : uses utilities
    
    %% Frame traits utility dependencies
    FrameTraitsUtilities ..> FrameTraits : wraps and validates
    FrameTraitsUtilities ..> FrameTraitsFixedFrame : validates
    FrameTraitsUtilities ..> FrameTraitsVariableFrame : validates  
    FrameTraitsUtilities ..> FrameTraitsConfigFrame : validates
    BaseFrame ..> FrameTraitsUtilities : uses utilities


